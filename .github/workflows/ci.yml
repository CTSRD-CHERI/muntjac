name: CI

on: [push, pull_request]

jobs:

  lint:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Install Verilator
        run: |
          curl -Ls https://download.opensuse.org/repositories/home:phiwag:edatools/xUbuntu_20.04/Release.key | sudo apt-key add -
          sudo sh -c "echo 'deb http://download.opensuse.org/repositories/home:/phiwag:/edatools/xUbuntu_20.04/ /' > /etc/apt/sources.list.d/edatools.list"
          sudo apt-get update
          sudo apt-get install verilator-4.040

      - name: Install Python dependencies
        run: pip3 install setuptools wheel

      - name: Install FuseSoC
        run: pip3 install -r python-requirements.txt

      - name: Run lint
        run: make lint

  simulator-build:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        include:
          - name: pipeline
            sim: muntjac_pipeline
          - name: core
            sim: muntjac_core

    steps:
      - uses: actions/checkout@v2

      - name: Install Verilator
        run: |
          curl -Ls https://download.opensuse.org/repositories/home:phiwag:edatools/xUbuntu_20.04/Release.key | sudo apt-key add -
          sudo sh -c "echo 'deb http://download.opensuse.org/repositories/home:/phiwag:/edatools/xUbuntu_20.04/ /' > /etc/apt/sources.list.d/edatools.list"
          sudo apt-get update
          sudo apt-get install verilator-4.040

      - name: Install Python dependencies
        run: pip3 install setuptools wheel

      - name: Install FuseSoC
        run: pip3 install -r python-requirements.txt

      - name: Run build
        run: make sim-${{ matrix.name }}

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.sim }}
          path: bin/${{ matrix.sim }}
          if-no-files-found: error

  riscv-tests-build:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Checkout riscv-tests
        uses: actions/checkout@v2
        with:
          repository: riscv/riscv-tests
          ref: c4217d88bce9f805a81f42e86ff56ed363931d69
          submodules: recursive
          path: riscv-tests

      - name: Override with custom link.ld
        run: |
          cp flows/link.ld riscv-tests/env/p/link.ld

      - name: Download compiler toolchain
        uses: i3h/download-release-asset@v1
        with:
          owner: lowRISC
          repo: lowrisc-toolchains
          tag: 20200904-1
          file: lowrisc-toolchain-gcc-rv64imac-20200904-1.tar.xz

      # Also add the tools to PATH for next step.
      - name: Extract compiler toolchain
        run: |
          tar -xf lowrisc-toolchain-gcc-rv64imac-20200904-1.tar.xz
          echo "`pwd`/lowrisc-toolchain-gcc-rv64imac-20200904-1/bin" >> $GITHUB_PATH

      - name: Build ISA tests
        run: |
          cd riscv-tests/isa
          make -j$(nproc)
          rm *.dump
          rm rv64mi-p-breakpoint
          tar -cjf ~/riscv-isa-tests.tar.xz *

      - uses: actions/upload-artifact@v2
        with:
          name: riscv-isa-tests
          path: ~/riscv-isa-tests.tar.xz
          if-no-files-found: error

  riscv-tests-run:
    runs-on: ubuntu-20.04
    needs: [simulator-build, riscv-tests-build]

    strategy:
      matrix:
        include:
          - name: pipeline
            sim: muntjac_pipeline
          - name: core
            sim: muntjac_core

    steps:

      - name: Get simulator
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.sim }}

      - name: Get tests
        uses: actions/download-artifact@v2
        with:
          name: riscv-isa-tests

      - name: Unpack tests
        run: |
          mkdir tests
          tar -xf riscv-isa-tests.tar.xz -C tests

      # Create a summary of each test outcome in the JUnit XML format.
      - name: Run tests
        run: |
          chmod +x ${{ matrix.sim }}
          echo "<testsuite>" > results.xml

          for isa in rv64ui rv64um rv64ua rv64uc rv64si rv64mi rv64uf rv64ud; do
            for test in tests/$isa-*; do
              /usr/bin/time --quiet -o $test.time -f "%e" ./${{ matrix.sim }} $test --timeout=1000000 > $test.out 2> $test.err || true

              echo "<testcase classname=\"Test\" name=\"$test\" time=\"`cat $test.time`\">" >> results.xml

              if ! grep -q "Exiting with argument 1$" $test.out; then
                echo "<failure type=\"failure\">" >> results.xml

                echo "System error:" >> results.xml
                sed -e "s/&/\&amp;/g" -e "s/>/\&gt;/g" -e "s/</\&lt;/g" -e "s/\"/\&quot;/g" -e "s/'/\&apos;/g" $test.err >> results.xml
                echo "" >> results.xml
                echo "System out:" >> results.xml
                sed -e "s/&/\&amp;/g" -e "s/>/\&gt;/g" -e "s/</\&lt;/g" -e "s/\"/\&quot;/g" -e "s/'/\&apos;/g" $test.out >> results.xml

                echo "</failure>" >> results.xml
              fi
              echo "</testcase>" >> results.xml
            done
          done

          echo "</testsuite>" >> results.xml

      - name: Publish test report
        uses: scacap/action-surefire-report@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: 'results.xml'
          check_name: riscv-tests-${{ matrix.name }}
