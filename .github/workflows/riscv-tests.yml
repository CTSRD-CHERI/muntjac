name: riscv-tests

# Triggered by a successful Verilator build.
on:
  workflow_run:
    workflows:
      - build-verilator
    types:
      - completed

jobs:

  build:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Checkout riscv-tests
        uses: actions/checkout@v2
        with:
          repository: riscv/riscv-tests
          submodules: recursive
          path: riscv-tests

      - name: Override with custom link.ld
        run: |
          cp flows/link.ld riscv-tests/env/p/link.ld

      - name: Download compiler toolchain
        uses: i3h/download-release-asset@v1
        with:
          owner: lowRISC
          repo: lowrisc-toolchains
          tag: 20200904-1
          file: lowrisc-toolchain-gcc-rv64imac-20200904-1.tar.xz

      # Also add the tools to PATH for next step.
      - name: Extract compiler toolchain
        run: |
          tar -xf lowrisc-toolchain-gcc-rv64imac-20200904-1.tar.xz
          echo "`pwd`/lowrisc-toolchain-gcc-rv64imac-20200904-1/bin" >> $GITHUB_PATH

      - name: Build ISA tests
        run: |
          cd $GITHUB_WORKSPACE/riscv-tests/isa
          make -j
          rm *.dump
          mkdir $GITHUB_WORKSPACE/riscv-tests/tests
          rm rv64mi-p-breakpoint
          mv rv64*-*-* $GITHUB_WORKSPACE/riscv-tests/tests

      - name: Upload test binaries
        uses: actions/upload-artifact@v2
        with:
          name: isa-tests
          path: riscv-tests/tests
          if-no-files-found: error


  test:
    runs-on: ubuntu-20.04
    needs: build

    strategy:
      matrix:
        include:
          - isa: rv64ui
            name: RV64I (user)
          - isa: rv64um
            name: RV64M
          - isa: rv64ua
            name: RV64A
          - isa: rv64uc
            name: RV64C
          - isa: rv64si
            name: RV64I (supervisor)
          - isa: rv64mi
            name: RV64I (machine)

    steps:
      - name: Get test binaries
        uses: actions/download-artifact@v2
        with:
          name: isa-tests
          path: tests

      - name: Get simulator
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: build-verilator.yml
          name: muntjac_pipeline

      # Create a summary of each test outcome in the JUnit XML format.
      - name: Run tests
        run: |
          chmod +x muntjac_pipeline

          for test in tests/${{ matrix.isa }}-*; do
            /usr/bin/time --quiet -o $test.time -f "%e" ./muntjac_pipeline $test --timeout=1000000 > $test.out 2> $test.err || true

            echo "<testcase classname=\"Test\" name=\"$test\" time=\"`cat $test.time`\">" > $test.xml

            if ! grep -q "Exiting with argument 1$" $test.out; then
              echo "<failure type=\"failure\">" >> $test.xml

              echo "System error:" >> $test.xml
              sed -e "s/&/\&amp;/g" -e "s/>/\&gt;/g" -e "s/</\&lt;/g" -e "s/\"/\&quot;/g" -e "s/'/\&apos;/g" $test.err >> $test.xml
              echo "" >> $test.xml
              echo "System out:" >> $test.xml
              sed -e "s/&/\&amp;/g" -e "s/>/\&gt;/g" -e "s/</\&lt;/g" -e "s/\"/\&quot;/g" -e "s/'/\&apos;/g" $test.out >> $test.xml

              echo "</failure>" >> $test.xml
            fi
            echo "</testcase>" >> $test.xml
          done

      - name: Compile results
        run: |
          echo "<testsuite tests=\"`ls tests/*.xml | wc -l`\">" > results.xml
          cat tests/*.xml >> results.xml
          echo "</testsuite>" >> results.xml

      # TODO: this report seems to attach to either the build-verilator workflow
      # or the lint-verilator workflow. See if it can attach to this workflow
      # instead.
      - name: Publish test report
        uses: scacap/action-surefire-report@v1
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: 'results.xml'
          check_name: ${{ matrix.name }}
